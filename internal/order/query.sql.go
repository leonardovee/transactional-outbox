// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package order

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id, aggregate_id, status, total
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, aggregate_id, status, total, created_at
`

type CreateOrderParams struct {
	ID          string
	AggregateID string
	Status      NullOrderStatus
	Total       int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.AggregateID,
		arg.Status,
		arg.Total,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const getAggregate = `-- name: GetAggregate :one
SELECT id, aggregate_id, status, total, created_at FROM orders 
WHERE aggregate_id = $1 LIMIT 1
`

func (q *Queries) GetAggregate(ctx context.Context, aggregateID string) (Order, error) {
	row := q.db.QueryRow(ctx, getAggregate, aggregateID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, aggregate_id, status, total, created_at FROM orders 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, aggregate_id, status, total, created_at FROM orders
ORDER BY created_at
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.Status,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
