// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package outbox

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusCreated  OrderStatus = "created"
	OrderStatusApproved OrderStatus = "approved"
	OrderStatusReady    OrderStatus = "ready"
	OrderStatusShipped  OrderStatus = "shipped"
	OrderStatusArrived  OrderStatus = "arrived"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Order struct {
	ID          string
	AggregateID string
	Status      NullOrderStatus
	Total       int32
	CreatedAt   pgtype.Timestamp
}

type Outbox struct {
	ID            string
	AggregateID   string
	AggregateType string
	Type          string
	Payload       []byte
	CreatedAt     pgtype.Timestamp
}
