// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package outbox

import (
	"context"
)

const createOutbox = `-- name: CreateOutbox :one
INSERT INTO outbox (
    id, aggregate_id, aggregate_type, type, payload
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, aggregate_id, aggregate_type, type, payload, created_at
`

type CreateOutboxParams struct {
	ID            string
	AggregateID   string
	AggregateType string
	Type          string
	Payload       []byte
}

func (q *Queries) CreateOutbox(ctx context.Context, arg CreateOutboxParams) (Outbox, error) {
	row := q.db.QueryRow(ctx, createOutbox,
		arg.ID,
		arg.AggregateID,
		arg.AggregateType,
		arg.Type,
		arg.Payload,
	)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.AggregateType,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOutbox = `-- name: DeleteOutbox :one
DELETE FROM outbox
WHERE id = $1
RETURNING id, aggregate_id, aggregate_type, type, payload, created_at
`

func (q *Queries) DeleteOutbox(ctx context.Context, id string) (Outbox, error) {
	row := q.db.QueryRow(ctx, deleteOutbox, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.AggregateType,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const getOutbox = `-- name: GetOutbox :one
SELECT id, aggregate_id, aggregate_type, type, payload, created_at FROM outbox 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOutbox(ctx context.Context, id string) (Outbox, error) {
	row := q.db.QueryRow(ctx, getOutbox, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.AggregateType,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
	)
	return i, err
}

const listOutbox = `-- name: ListOutbox :many
SELECT id, aggregate_id, aggregate_type, type, payload, created_at FROM outbox
ORDER BY created_at ASC
FOR UPDATE SKIP LOCKED
LIMIT $1
`

func (q *Queries) ListOutbox(ctx context.Context, limit int32) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, listOutbox, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.AggregateType,
			&i.Type,
			&i.Payload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
